// we will learn how to write scripts in package.json to run our application in dev mode, prod mode. Initially we were using npx command but we will use scripts now.

// npm run start and npm start are same commands. This is only applicable for start key word.
// this npm start executes package parcel behind the scenes.

// Dom elements are HTML elements like h1, div etc.

what is root element in react? 
//The root element is the entry point for rendering React components into the browser DOM.
//It acts as the parent container where all other React components are injected.

// JSX -JSX stands for JavaScript XML.JSX allows us to write HTML in React. JSX is not a part of react. Without jsx we can create our large web application. But JSX makes it easy to write HTML in react so that is why we use it. JSX is HTML or xml like syntax not HTML. JSX is not writing HTML inside javascript. 

// javascript engines do not understand jsx directly. Then how it  works?
Even before this jsx code goes to js engine ,the  Parcel transpiles(converted to the code that browser can understand) the code and then it is goes to js engine. This transpilation is done by babel.This bable is already present with parcel.As soon as we save the code this babel will transpile the code.

//babel -Babel is a transpiler. We use Babel with React to transpile the JSX code into simple React functions that can be understood by browsers. Using this way we can assure that our JSX code can work in almost any browser. 

// How JSX works?
this jsx is convert to react element (i.e. basically a js object) using React.createElement() behind the scenes,and babel is doing this job. and then later render will convert into html.

// parcel is manager of babel.
// attributes in JSX are written in camelCase.
// we have wrap jsx into () if we have multiple lines.


// Cross Site Scripting (XSS) is a vulnerability in a web application that allows a third party to execute a script in the userâ€™s browser on behalf of the web application.
example: 
const data=api.getDate();    // this api is returning a malicious js code.That code will be executed in users browser  and can steal data stored as cookies,local storage, session storage etc. But JSX provide safety as it does not execute that code blindly.JSX will takes care of these injection attacks or Cross Site Scripting (XSS) attacks.
const HeadingComponent1 = () => {
  return (
    <div className="">
      {data}
      <h1 className="heading">React functional component1</h1>
    </div>
  );
};
// JSX is making our code more readable. 